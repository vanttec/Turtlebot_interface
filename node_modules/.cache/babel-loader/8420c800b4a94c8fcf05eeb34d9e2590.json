{"ast":null,"code":"var _jsxFileName = \"/home/edison/react_projects/ros-app/src/components/ros-graph.js\";\nimport * as React from 'react';\nimport ROSLIB from 'roslib';\nimport ButtonPanel from '../components/ros-graph/ButtonPanel.js';\nimport NodeGraph from '../components/ros-graph/NodeGraph';\nimport NodeList from '../components/ros-graph/NodeList';\nimport * as RosGraph from '../lib/RosGraph';\nimport RosGraphView from '../lib/RosGraphView'; //import \"../../node_modules/react-grid-layout/css/styles.css\";\n//import \"../node_modules/react-resizable/css/styles.css\";\n\nimport './../styles/Rosgraph.css';\n\nclass Rosgraph extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      autoExpand: true,\n      layouts: {},\n      rosGraph: new RosGraph.RosGraph(),\n      view: new RosGraphView(),\n      widgets: []\n    };\n\n    this.setNodeActive = (treeNode, toggled = true) => {\n      this.setState({\n        view: this.state.view.setNodeActive(treeNode, toggled, this.state.rosGraph)\n      });\n    };\n\n    this.addWidget = (id, element) => {\n      console.log(\"Adding: \", id, element);\n      this.setState(prevState => ({\n        widgets: [...prevState.widgets, {\n          id: id,\n          element: element\n        }]\n      }));\n    };\n\n    this.removeWidget = id => {\n      console.log(\"Removing: \", id);\n      const widgets = this.state.widgets.filter(item => {\n        return item.id !== id;\n      });\n      this.setState({\n        widgets: widgets\n      });\n    };\n\n    this.handleSearch = event => {\n      this.setState({\n        view: this.state.view.searchFor(event.target.value)\n      });\n    };\n\n    this.handleSearchKey = event => {// if (event.keyCode === 27) {\n      //   this.setState({\n      //     view: this.state.view.searchFor(\"\"),\n      //   })\n      // }\n    };\n\n    this.hideItem = (path, type) => {\n      this.setState({\n        view: this.state.view.hideItem(path, type)\n      });\n    };\n  }\n\n  render() {\n    console.log(\"Graph\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Graph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Sidebar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \"HOLA MUNDDOOOOOO\"));\n  }\n\n}\n\nexport default Rosgraph;","map":{"version":3,"sources":["/home/edison/react_projects/ros-app/src/components/ros-graph.js"],"names":["React","ROSLIB","ButtonPanel","NodeGraph","NodeList","RosGraph","RosGraphView","Rosgraph","Component","state","autoExpand","layouts","rosGraph","view","widgets","setNodeActive","treeNode","toggled","setState","addWidget","id","element","console","log","prevState","removeWidget","filter","item","handleSearch","event","searchFor","target","value","handleSearchKey","hideItem","path","type","render"],"mappings":";AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,qBAAzB,C,CAEA;AACA;;AACA,OAAO,0BAAP;;AAyBA,MAAMC,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAqD;AAAA;AAAA;AAAA,SACjDC,KADiD,GACzC;AACNC,MAAAA,UAAU,EAAE,IADN;AAENC,MAAAA,OAAO,EAAE,EAFH;AAGNC,MAAAA,QAAQ,EAAE,IAAIP,QAAQ,CAACA,QAAb,EAHJ;AAINQ,MAAAA,IAAI,EAAE,IAAIP,YAAJ,EAJA;AAKNQ,MAAAA,OAAO,EAAE;AALH,KADyC;;AAAA,SAejDC,aAfiD,GAejC,CAACC,QAAD,EAAqBC,OAAgB,GAAG,IAAxC,KAAiD;AAC/D,WAAKC,QAAL,CAAc;AACZL,QAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWI,IAAX,CAAgBE,aAAhB,CAA8BC,QAA9B,EAAwCC,OAAxC,EAAiD,KAAKR,KAAL,CAAWG,QAA5D;AADM,OAAd;AAGD,KAnBgD;;AAAA,SA0BjDO,SA1BiD,GA0BrC,CAACC,EAAD,EAAaC,OAAb,KAA6C;AACvDC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,EAAxB,EAA4BC,OAA5B;AACA,WAAKH,QAAL,CAAcM,SAAS,KAAK;AAC1BV,QAAAA,OAAO,EAAE,CAAC,GAAGU,SAAS,CAACV,OAAd,EAAuB;AAC9BM,UAAAA,EAAE,EAAEA,EAD0B;AAE9BC,UAAAA,OAAO,EAAEA;AAFqB,SAAvB;AADiB,OAAL,CAAvB;AAMD,KAlCgD;;AAAA,SAoCnDI,YApCmD,GAoCnCL,EAAD,IAAgB;AAC7BE,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,EAA1B;AAEA,YAAMN,OAAO,GAAG,KAAKL,KAAL,CAAWK,OAAX,CAAmBY,MAAnB,CAA2BC,IAAD,IAAQ;AAChD,eAAOA,IAAI,CAACP,EAAL,KAAYA,EAAnB;AACD,OAFe,CAAhB;AAIA,WAAKF,QAAL,CAAc;AACZJ,QAAAA,OAAO,EAAEA;AADG,OAAd;AAGD,KA9CkD;;AAAA,SAgDnDc,YAhDmD,GAgDnCC,KAAD,IAAsC;AACnD,WAAKX,QAAL,CAAc;AACZL,QAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWI,IAAX,CAAgBiB,SAAhB,CAA0BD,KAAK,CAACE,MAAN,CAAaC,KAAvC;AADM,OAAd;AAGD,KApDkD;;AAAA,SAsDnDC,eAtDmD,GAsDhCJ,KAAD,IAA8B,CAC9C;AACA;AACA;AACA;AACA;AACD,KA5DkD;;AAAA,SA8DnDK,QA9DmD,GA8DxC,CAACC,IAAD,EAAeC,IAAf,KAAgC;AACzC,WAAKlB,QAAL,CAAc;AAACL,QAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWI,IAAX,CAAgBqB,QAAhB,CAAyBC,IAAzB,EAA+BC,IAA/B;AAAP,OAAd;AACD,KAhEkD;AAAA;;AAmEnDC,EAAAA,MAAM,GAAG;AACPf,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,wBAEE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CAFF;AAQD;;AA7EkD;;AAgFrD,eAAehB,QAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ROSLIB from 'roslib';\n\nimport ButtonPanel from '../components/ros-graph/ButtonPanel.js';\nimport NodeGraph from '../components/ros-graph/NodeGraph';\nimport NodeList from '../components/ros-graph/NodeList';\nimport * as RosGraph from '../lib/RosGraph';\nimport RosGraphView from '../lib/RosGraphView';\n\n//import \"../../node_modules/react-grid-layout/css/styles.css\";\n//import \"../node_modules/react-resizable/css/styles.css\";\nimport './../styles/Rosgraph.css';\n\ntype TreeNode = {\n  name: string,\n  path: string,\n  type: RosGraph.PrimitiveType,\n}\n//Cuando se activa funcion en App.js, se utiliza funcion Props para tomar el valor de ROS\ntype Props = {\n  ros: ROSLIB.Ros,\n}\n\ntype WidgetType = {\n  element: React.Element<any>,\n  id: string,\n}\n\ntype State = {\n  autoExpand: boolean,\n  layouts: ?Object,\n  rosGraph: RosGraph.RosGraph,\n  view: RosGraphView,\n  widgets: Array<WidgetType>,\n}\n\nclass Rosgraph extends React.Component<Props, State> {\n    state = {\n      autoExpand: true,\n      layouts: {},\n      rosGraph: new RosGraph.RosGraph(),\n      view: new RosGraphView(),\n      widgets: [],\n    }\n\n    /**\n     * @param treeNode.name {string} Node's label\n     * @param treeNode.path {string} Node's unique identifier\n     * @param treeNode.type {string} \"node\" or \"topic\" (TODO: move to enum)\n     * @param toggled {boolean} True if the node should be expanded\n     */\n    setNodeActive = (treeNode: TreeNode, toggled: boolean = true) => {\n      this.setState({\n        view: this.state.view.setNodeActive(treeNode, toggled, this.state.rosGraph)\n      })\n    }\n\n    /**\n     * @param id {string} Unique identifier of the new widget\n     * @param element {React.Node} The react component to add to the window\n     * @param name {string} The label to give the widget\n     */\n    addWidget = (id: string, element: React.Element<any>) => {\n      console.log(\"Adding: \", id, element)\n      this.setState(prevState => ({\n        widgets: [...prevState.widgets, {\n          id: id,\n          element: element\n        }],\n      }));\n    }\n\n  removeWidget = (id: string) => {\n    console.log(\"Removing: \", id)\n\n    const widgets = this.state.widgets.filter((item)=>{\n      return item.id !== id;\n    });\n\n    this.setState({\n      widgets: widgets,\n    })\n  }\n\n  handleSearch = (event: {target: {value: string}}) => {\n    this.setState({\n      view: this.state.view.searchFor(event.target.value),\n    })\n  }\n\n  handleSearchKey = (event: {keyCode: string}) => {\n    // if (event.keyCode === 27) {\n    //   this.setState({\n    //     view: this.state.view.searchFor(\"\"),\n    //   })\n    // }\n  }\n\n  hideItem = (path: string, type: string) => {\n    this.setState({view: this.state.view.hideItem(path, type)})\n  }\n\n\n  render() {\n    console.log(\"Graph\");\n    return (\n      \n      <div className=\"Graph\">\n        <div className=\"Sidebar\">\n        HOLA MUNDDOOOOOO\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Rosgraph;\n"]},"metadata":{},"sourceType":"module"}