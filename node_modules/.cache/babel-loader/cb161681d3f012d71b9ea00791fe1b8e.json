{"ast":null,"code":"import _ from 'lodash';\n\nclass RosGraph {\n  constructor(nodes = [], topics = [], services = [], actions = []) {\n    this.getRelations = (path, type) => {\n      switch (type) {\n        case \"node\":\n          {\n            const result = _.find(this.nodes, {\n              path: path\n            });\n\n            if (result) {\n              return {\n                in: result.topics.subscribers,\n                out: result.topics.publishers,\n                type: \"topic\"\n              };\n            }\n          }\n          break;\n\n        case \"topic\":\n          {\n            const result = _.find(this.topics, {\n              path: path\n            });\n\n            if (result) return {\n              in: result.publishers,\n              out: result.subscribers,\n              type: \"node\"\n            };\n          }\n          break;\n\n        default:\n      }\n    };\n\n    this.nodes = nodes;\n    this.topics = topics;\n    this.services = services;\n    this.actions = actions;\n  }\n\n  findNode(path, type) {\n    switch (type) {\n      case \"node\":\n        return _.find(this.nodes, {\n          path: path\n        });\n\n      case \"topic\":\n        return _.find(this.topics, {\n          path: path\n        });\n\n      default:\n    }\n  }\n\n}\n\nfunction getNodeDetails(ros, node) {\n  return new Promise((resolve, reject) => {\n    ros.getNodeDetails(node, (subscribing, publishing, services) => {\n      let detailedNode = {\n        path: node,\n        actions: [],\n        topics: {\n          publishers: publishing,\n          subscribers: subscribing\n        },\n        services: {\n          clients: services\n        },\n        type: \"node\"\n      };\n      resolve(detailedNode); // Failed callback\n    }, message => {\n      console.log(\"failed callback\");\n      console.error(\"Failed to get node details\", node, message);\n      reject(message);\n    });\n  });\n}\n\nfunction getNodes(ros) {\n  return new Promise((resolve, reject) => {\n    ros.getNodes(list => {\n      let newNodes = list.map(node => getNodeDetails(ros, node));\n      Promise.all(newNodes.map(p => p.catch(() => undefined))).then(values => {\n        let filteredValues = values.filter(n => n !== undefined);\n        console.table(filteredValues);\n        resolve(_.sortBy(filteredValues, 'path'));\n      });\n    }, message => {\n      console.log('RosGraph updateRosGraph failed to getNodes: ' + message);\n      return reject('RosGraph updateRosGraph failed to getNodes: ' + message);\n    });\n  });\n}\n\nfunction getTopicRelation(nodes, topicName) {\n  let publishers = [];\n  let subscribers = [];\n  nodes.forEach(node => {\n    if (node.topics && node.topics.publishers && node.topics.publishers.includes(topicName)) publishers.push(node.path);\n    if (node.topics && node.topics.subscribers && node.topics.subscribers.includes(topicName)) subscribers.push(node.path);\n  });\n  return {\n    publishers: publishers,\n    subscribers: subscribers\n  };\n}\n\nfunction getTopics(ros, nodes) {\n  return new Promise((resolve, reject) => {\n    ros.getTopics(topics => {\n      const topicList = topics.topics.map((topicName, i) => {\n        const node = getTopicRelation(nodes, topicName);\n        return {\n          path: topicName,\n          messageType: topics.types[i],\n          publishers: node.publishers,\n          subscribers: node.subscribers,\n          type: \"topic\"\n        };\n      });\n\n      const sortedTopics = _.sortBy(topicList, 'path');\n\n      resolve({\n        topics: sortedTopics,\n        nodes: nodes\n      }); // Failed callback\n    }, message => {\n      console.error(\"Failed to get topic\", message);\n    });\n  });\n}\n\nfunction GetRosGraph(ros) {\n  return new Promise((resolve, reject) => {\n    return getNodes(ros).then(nodes => getTopics(ros, nodes)).then(({\n      topics,\n      nodes\n    }) => resolve(new RosGraph(nodes, topics)));\n  });\n}\n\nfunction filterGraph(rosGraph, filter) {\n  const nodes = _.filter(rosGraph.nodes, p => {\n    return p.path.includes(filter);\n  });\n\n  const topics = _.filter(rosGraph.topics, p => {\n    return p.path.includes(filter);\n  });\n\n  const services = _.filter(rosGraph.services, p => {\n    return p.path.includes(filter);\n  });\n\n  const actions = _.filter(rosGraph.actions, p => {\n    return p.path.includes(filter);\n  });\n\n  return new RosGraph(nodes, topics, services, actions);\n}\n\nexport { RosGraph, GetRosGraph, filterGraph };\nexport default {\n  RosGraph,\n  GetRosGraph\n};","map":{"version":3,"sources":["/home/edison/react_projects/ros-app/src/lib/RosGraph.js"],"names":["_","RosGraph","constructor","nodes","topics","services","actions","getRelations","path","type","result","find","in","subscribers","out","publishers","findNode","getNodeDetails","ros","node","Promise","resolve","reject","subscribing","publishing","detailedNode","clients","message","console","log","error","getNodes","list","newNodes","map","all","p","catch","undefined","then","values","filteredValues","filter","n","table","sortBy","getTopicRelation","topicName","forEach","includes","push","getTopics","topicList","i","messageType","types","sortedTopics","GetRosGraph","filterGraph","rosGraph"],"mappings":"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","sourcesContent":["// @flow\nimport _ from 'lodash';\n\ntype Id = string\n\ntype PrimitiveType =\n  | \"action\"\n  | \"node\"\n  | \"service\"\n  | \"topic\"\n\ntype Node = {\n  actions: Array<Id>,\n  path: string,\n  services: {\n    clients: Array<Id>,\n  },\n  topics: {\n    publishers: Array<Id>,\n    subscribers: Array<Id>,\n  },\n  type: \"node\",\n}\n\ntype Topic = {\n  messageType: string,\n  path: string,\n  publishers: Array<Id>,\n  subscribers: Array<Id>,\n  type: \"topic\",\n}\n\ntype Service = {\n  path: string,\n  type: \"service\",\n}\n\ntype Action = {\n  path: string,\n  type: \"action\",\n}\n\ntype Primitive = Node | Topic | Service | Action\n\ntype Relations = {\n  in: Array<Id>,\n  out: Array<Id>,\n  type: PrimitiveType\n}\n\nclass RosGraph {\n  nodes: Array<Node>\n  topics: Array<Topic>\n  services: Array<Service>\n  actions: Array<Action>\n\n  constructor(nodes: Array<Node> = [], topics: Array<Topic> = [], services: Array<Service> = [], actions: Array<Action> = []) {\n    this.nodes = nodes\n    this.topics = topics\n    this.services = services\n    this.actions = actions\n  }\n\n  getRelations = (path: string, type: PrimitiveType): ?Relations => {\n    switch (type) {\n      case \"node\":\n        {\n          const result: ?Node = _.find(this.nodes, {path: path})\n          if (result) {\n            return {\n                in: result.topics.subscribers,\n                out: result.topics.publishers,\n                type: \"topic\"\n              }\n            }\n        }\n        break\n      case \"topic\":\n        {\n          const result = _.find(this.topics, {path: path})\n          if (result)\n            return {\n              in: result.publishers,\n              out: result.subscribers,\n              type: \"node\"\n            }\n        }\n        break\n      default:\n    }\n  }\n\n  findNode(path: string, type: PrimitiveType): ?Node | Topic {\n    switch (type) {\n      case \"node\":\n          return _.find(this.nodes, {\n            path: path\n          })\n      case \"topic\":\n          return _.find(this.topics, {\n            path: path\n          })\n      default:\n    }\n  }\n}\n\nfunction getNodeDetails(ros: Object, node: string): Promise<Node> {\n  return new Promise((resolve, reject) => {\n\n    ros.getNodeDetails(node, (subscribing: Array<Id>, publishing: Array<Id>, services: Array<Id>) => {\n      let detailedNode: Node = {\n        path: node,\n        actions: [],\n        topics: {\n          publishers: publishing,\n          subscribers: subscribing,\n        },\n        services: {\n          clients: services\n        },\n        type: \"node\",\n      }\n\n      resolve(detailedNode)\n\n    // Failed callback\n  }, (message: string) => {\n     console.log(\"failed callback\")\n      console.error(\"Failed to get node details\", node, message)\n      reject(message)\n    })\n  })\n}\n\nfunction getNodes(ros: Object): Promise<Array<Node>> {\n  return new Promise((resolve, reject) => {\n    ros.getNodes((list) => {\n      let newNodes = list.map((node) => getNodeDetails(ros, node))\n\n      Promise.all(newNodes.map(p => p.catch(() => undefined)))\n        .then(values => {\n          let filteredValues = values.filter((n) => n !== undefined)\n          console.table(filteredValues)\n          resolve(_.sortBy(filteredValues, 'path'))\n        })\n\n    }, (message) => {\n      console.log('RosGraph updateRosGraph failed to getNodes: ' + message);\n      return reject('RosGraph updateRosGraph failed to getNodes: ' + message);\n    });\n  })\n}\n\nfunction getTopicRelation(nodes: Array<Node>, topicName: string): {publishers: Array<Id>, subscribers: Array<Id>} {\n  let publishers = []\n  let subscribers = []\n  nodes.forEach((node) => {\n    if (node.topics && node.topics.publishers && node.topics.publishers.includes(topicName)) publishers.push(node.path)\n    if (node.topics && node.topics.subscribers && node.topics.subscribers.includes(topicName)) subscribers.push(node.path)\n  })\n  return {\n    publishers: publishers,\n    subscribers: subscribers\n  }\n}\n\nfunction getTopics(ros: Object, nodes: Array<Node>): Promise<{topics: Array<Topic>, nodes: Array<Node>}> {\n  return new Promise((resolve, reject) => {\n    ros.getTopics((topics) => {\n      const topicList: Array<Topic> = topics.topics.map((topicName, i) => {\n        const node = getTopicRelation(nodes, topicName)\n        return {\n          path: topicName,\n          messageType: topics.types[i],\n          publishers: node.publishers,\n          subscribers: node.subscribers,\n          type: \"topic\",\n        }\n      });\n      const sortedTopics: Array<Topic> = _.sortBy(topicList, 'path');\n      resolve({\n        topics: sortedTopics,\n        nodes: nodes\n      });\n\n    // Failed callback\n    }, (message) => {\n      console.error(\"Failed to get topic\", message)\n    });\n  })\n}\n\nfunction GetRosGraph(ros: RosGraph): Promise<RosGraph> {\n  return new Promise((resolve, reject) => {\n    return getNodes(ros)\n      .then((nodes) => getTopics(ros, nodes))\n      .then(({topics,nodes}) => resolve(new RosGraph(nodes, topics)))\n  })\n}\n\nfunction filterGraph(rosGraph: RosGraph, filter: string): RosGraph {\n  const nodes = _.filter(rosGraph.nodes, (p) => {return p.path.includes(filter)})\n  const topics = _.filter(rosGraph.topics, (p) => {return p.path.includes(filter)})\n  const services = _.filter(rosGraph.services, (p) => {return p.path.includes(filter)})\n  const actions = _.filter(rosGraph.actions, (p) => {return p.path.includes(filter)})\n  return new RosGraph(nodes, topics, services, actions)\n}\n\nexport {RosGraph, GetRosGraph, filterGraph}\nexport type {Node, Topic, Service, Action, Relations, Id, Primitive, PrimitiveType}\nexport default {RosGraph, GetRosGraph}\n"]},"metadata":{},"sourceType":"module"}