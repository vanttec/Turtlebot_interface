{"ast":null,"code":"var _jsxFileName = \"/home/edison/react_projects/ros-app/src/lib/NodeTree.js\";\nimport _ from 'lodash';\nimport React from 'react';\nimport RosGraphView from '../lib/RosGraphView';\nimport * as RosGraph from '../lib/RosGraph';\n\nfunction addDecorator(path, relations) {\n  let className = null;\n\n  if (relations) {\n    if (relations.in.includes(path)) className = \"NodeInput\";\n    if (relations.out.includes(path)) className = \"NodeOutput\";\n  }\n\n  if (className) {\n    return {\n      Header: props => /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        style: props.style.base,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: props.style.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }, props.node.name))\n    };\n  }\n}\n/**\n * Insert a new node at a location in the tree (recursive)\n * @private\n * @param {object} data - The tree in which to add the node\n * @param {array} path - The full path\n * @param {number} pathIndex - Tracks the recursive level down the path\n * @param {array} toggled - A list of all toggled tree nodes\n */\n\n\nfunction insert(data = [], path, pathIndex, view, type) {\n  const name = '/' + path[pathIndex];\n  const subpath = path.slice(0, pathIndex + 1).join('/');\n  const active = view.active ? view.type === type && view.active.path === subpath : false; // Add node and stop recursion if root node\n\n  if (pathIndex === path.length - 1) {\n    const decorator = active ? undefined : addDecorator(subpath, view.relations);\n    const leaf = {\n      active: active,\n      decorators: decorator,\n      name: name,\n      path: subpath,\n      type: type\n    };\n    data.push(leaf);\n    return data;\n  } // Not a root node so need to check it should be toggled\n\n\n  var index = _.findIndex(data, o => o.path === subpath);\n\n  var stem = null;\n\n  if (index === -1) {\n    const decorator = active ? undefined : addDecorator(subpath, view.relations);\n    stem = {\n      active: active,\n      children: [],\n      decorators: decorator,\n      name: name,\n      path: subpath,\n      toggled: !!view.toggled[type] && view.toggled[type].includes(subpath),\n      type: type\n    };\n    data.push(stem);\n  } else {\n    stem = data[index];\n    stem.children = stem.children || [];\n    stem.toggled = !!view.toggled[type] && view.toggled[type].includes(subpath);\n  }\n\n  return insert(stem.children, path, ++pathIndex, view, type);\n}\n/**\n * Create a new tree from a list of nodes\n * @param {string} nodes - The list of nodes\n * @param {array} view.toggled - The list of nodes that are toggled (expanded)\n * @param {array} view.relations.in - The list of nodes that are inputs (expanded)\n * @param {array} view.relations.out - The list of nodes that are outputs (expanded)\n * @return {object} A new full tree\n */\n\n\nfunction GetNodeTree(nodes = [], view = new RosGraphView(), type) {\n  var data = [];\n  nodes.forEach(node => {\n    if (!view.getHidden().includes(node.path) && (view.search ? node.path.includes(view.search) : true)) {\n      const path = node.path.split(\"/\");\n      insert(data, path, 1, view, type);\n    }\n  });\n  return data;\n}\n\nexport { GetNodeTree };\nexport default GetNodeTree;","map":{"version":3,"sources":["/home/edison/react_projects/ros-app/src/lib/NodeTree.js"],"names":["_","React","RosGraphView","RosGraph","addDecorator","path","relations","className","in","includes","out","Header","props","style","base","title","node","name","insert","data","pathIndex","view","type","subpath","slice","join","active","length","decorator","undefined","leaf","decorators","push","index","findIndex","o","stem","children","toggled","GetNodeTree","nodes","forEach","getHidden","search","split"],"mappings":"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","sourcesContent":["// @flow\nimport _ from 'lodash';\nimport React from 'react';\n\nimport RosGraphView from '../lib/RosGraphView';\nimport * as RosGraph from '../lib/RosGraph';\n\n\ntype NodeTreeObj = {\n  active: boolean,\n  children?: Array<NodeTreeObj>,\n  decorators?: ?Object,\n  name: string,\n  path: string,\n  toggled?: boolean,\n  type: RosGraph.PrimitiveType,\n}\n\ntype NodeTreeArr = Array<NodeTreeObj>\ntype NodeTree = NodeTreeObj | NodeTreeArr\n\nfunction addDecorator(path: string, relations: ?RosGraph.Relations): ?Object {\n  let className = null;\n\n  if (relations) {\n    if (relations.in.includes(path)) className = \"NodeInput\"\n    if (relations.out.includes(path)) className = \"NodeOutput\"\n  }\n\n  if (className) {\n    return {\n      Header: props => (\n        <div className={className} style={props.style.base}>\n          <div style={props.style.title}>{props.node.name}</div>\n        </div>\n      )\n    };\n  }\n}\n\n/**\n * Insert a new node at a location in the tree (recursive)\n * @private\n * @param {object} data - The tree in which to add the node\n * @param {array} path - The full path\n * @param {number} pathIndex - Tracks the recursive level down the path\n * @param {array} toggled - A list of all toggled tree nodes\n */\nfunction insert(data: NodeTreeArr = [], path: Array<string>, pathIndex: number, view: RosGraphView, type: RosGraph.PrimitiveType) {\n  const name: string = '/' + path[pathIndex]\n  const subpath: string = path.slice(0, pathIndex + 1).join('/')\n  const active: boolean = view.active ? view.type === type && view.active.path === subpath : false\n\n    // Add node and stop recursion if root node\n  if (pathIndex === path.length - 1) {\n    const decorator = active ? undefined : addDecorator(subpath, view.relations)\n    const leaf: NodeTreeObj = {\n      active: active,\n      decorators: decorator,\n      name: name,\n      path: subpath,\n      type: type,\n    }\n    data.push(leaf);\n    return data;\n  }\n\n  // Not a root node so need to check it should be toggled\n  var index: number = _.findIndex(data, (o) => o.path === subpath)\n  var stem: ?NodeTreeObj = null\n  if (index === -1) {\n    const decorator = active ? undefined : addDecorator(subpath, view.relations)\n    stem = {\n      active: active,\n      children: [],\n      decorators: decorator,\n      name: name,\n      path: subpath,\n      toggled: !!view.toggled[type] && view.toggled[type].includes(subpath),\n      type: type,\n    }\n    data.push(stem)\n  } else {\n    stem = data[index]\n    stem.children = stem.children || []\n    stem.toggled = !!view.toggled[type] && view.toggled[type].includes(subpath)\n  }\n\n  return insert(stem.children, path, ++pathIndex, view, type);\n}\n\n/**\n * Create a new tree from a list of nodes\n * @param {string} nodes - The list of nodes\n * @param {array} view.toggled - The list of nodes that are toggled (expanded)\n * @param {array} view.relations.in - The list of nodes that are inputs (expanded)\n * @param {array} view.relations.out - The list of nodes that are outputs (expanded)\n * @return {object} A new full tree\n */\nfunction GetNodeTree(nodes: Array<{path: string}> = [], view: RosGraphView = new RosGraphView(), type: RosGraph.PrimitiveType): NodeTree {\n\n  var data: NodeTreeArr = [];\n  nodes.forEach((node) => {\n    if (!view.getHidden().includes(node.path) && (view.search ? node.path.includes(view.search) : true)) {\n      const path = node.path.split(\"/\")\n      insert(data, path, 1, view, type);\n    }\n  });\n  return data;\n}\n\nexport {GetNodeTree}\nexport type {NodeTree}\nexport default GetNodeTree;\n"]},"metadata":{},"sourceType":"module"}