{"ast":null,"code":"var _jsxFileName = \"/home/edison/react_projects/ros-app/src/components/ros-graph/NodeGraph.js\";\nimport * as React from 'react';\nimport Graph from 'react-graph-vis';\nimport * as RosGraph from './lib/RosGraph';\nimport RosGraphView from './lib/RosGraphView';\n\nclass NodeGraph extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      options: NodeGraph.getOptions(),\n      lonely: {\n        highlight: false,\n        hide: false\n      }\n    };\n\n    this.getGroupTag = (view, node) => {\n      let group = \"default\"; // Lonely node\n\n      if (this.state.lonely.highlight && node.type === \"topic\") {\n        if (node.publishers.length + node.subscribers.length === 1) group = \"lonely\";\n      }\n\n      if (view !== undefined) {\n        if (view.type === node.type && view.active && view.active.path === node.path) group = \"active\";else if (view.relations && view.relations.in.includes(node.path)) group = \"input\";else if (view.relations && view.relations.out.includes(node.path)) group = \"output\";\n      }\n\n      return group;\n    };\n\n    this.createGraph = (rosGraph, view = new RosGraphView()) => {\n      let edges = [];\n      let nodes = [];\n      let hidden = view.getHidden(); // Deal with nodes\n\n      rosGraph.nodes.forEach(node => {\n        if (hidden.includes(node.path)) return;\n        const graphId = \"node_\" + node.path;\n        const group = this.getGroupTag(view, node); // ***** Add edges ******\n        // Assuming topics but links may be services or actions etc.\n\n        if (node.topics) {\n          let topics = node.topics;\n          topics.publishers && topics.publishers.forEach(topic => {\n            edges.push({\n              from: graphId,\n              to: \"topic_\" + topic\n            });\n          });\n          topics.subscribers && topics.subscribers.forEach(topic => {\n            edges.push({\n              from: \"topic_\" + topic,\n              to: graphId\n            });\n          });\n        }\n\n        nodes.push({\n          id: graphId,\n          label: node.path,\n          shape: \"box\",\n          group: group\n        });\n      });\n      rosGraph.topics.forEach(node => {\n        if (hidden.includes(node.path)) return;\n        const graphId = \"topic_\" + node.path;\n        const group = this.getGroupTag(view, node);\n        nodes.push({\n          id: graphId,\n          label: node.path,\n          shape: \"ellipse\",\n          group: group\n        });\n      });\n      const graph = {\n        nodes: nodes,\n        edges: edges\n      };\n      return graph;\n    };\n  }\n\n  static getOptions() {\n    return {\n      layout: {\n        hierarchical: {\n          direction: 'LR',\n          enabled: false,\n          sortMethod: 'directed'\n        }\n      },\n      edges: {\n        color: \"#d4d3d3\",\n        smooth: true\n      },\n      nodes: {\n        color: {\n          background: 'rgb(98, 118, 131)',\n          border: 'rgb(98, 118, 131)',\n          hover: {\n            background: 'rgb(92, 162, 180)',\n            border: 'rgb(122, 192, 210)'\n          },\n          highlight: {\n            background: 'rgb(122, 192, 210)',\n            border: 'rgb(122, 192, 210)'\n          }\n        },\n        font: {\n          color: 'rgb(223, 223, 223)'\n        }\n      },\n      interaction: {\n        hover: true\n      },\n      groups: {\n        default: {\n          color: {\n            background: 'rgb(98, 118, 131)',\n            border: 'rgb(98, 118, 131)'\n          }\n        },\n        active: {\n          color: {\n            background: 'rgb(122, 192, 210)',\n            border: 'rgb(122, 192, 210)'\n          }\n        },\n        input: {\n          color: {\n            background: 'rgb(177, 147, 18)',\n            border: 'rgb(177, 147, 18)'\n          }\n        },\n        output: {\n          color: {\n            background: 'rgb(128, 177, 18)',\n            border: 'rgb(128, 177, 18)'\n          }\n        },\n        lonely: {\n          color: {\n            background: 'rgb(163, 105, 105)',\n            border: 'rgb(163, 105, 105)'\n          }\n        }\n      },\n      autoResize: true\n    };\n  }\n\n  render() {\n    const graph = this.createGraph(this.props.rosGraph, this.props.view);\n    const events = {\n      click: event => {\n        if (event.nodes.length > 0) {\n          const index = event.nodes[0].indexOf('/');\n          let path = event.nodes[0];\n          let type = \"node\";\n\n          if (index > 0) {\n            path = event.nodes[0].slice(index);\n            type = event.nodes[0].slice(0, index - 1);\n          }\n\n          const node = {\n            path: path,\n            name: path,\n            type: type\n          };\n          this.props.setNodeActive(node, true);\n        }\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"NodeGraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        flex: '1 1 auto',\n        height: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Graph, {\n      graph: graph,\n      options: this.state.options,\n      style: {\n        height: \"100%\"\n      },\n      events: events,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ButtonPanel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"SmallButton ColorTwo\",\n      onClick: () => {\n        let lonely = this.state.lonely;\n        lonely.highlight = !this.state.lonely.highlight;\n        this.setState({\n          lonely: lonely\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }\n    }, this.state.lonely.highlight ? \"hide lonely\" : \"lonely\")));\n  }\n\n}\n\nexport default NodeGraph;","map":{"version":3,"sources":["/home/edison/react_projects/ros-app/src/components/ros-graph/NodeGraph.js"],"names":["React","Graph","RosGraph","RosGraphView","NodeGraph","Component","state","options","getOptions","lonely","highlight","hide","getGroupTag","view","node","group","type","publishers","length","subscribers","undefined","active","path","relations","in","includes","out","createGraph","rosGraph","edges","nodes","hidden","getHidden","forEach","graphId","topics","topic","push","from","to","id","label","shape","graph","layout","hierarchical","direction","enabled","sortMethod","color","smooth","background","border","hover","font","interaction","groups","default","input","output","autoResize","render","props","events","click","event","index","indexOf","slice","name","setNodeActive","flex","height","setState"],"mappings":";AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAO,KAAKC,QAAZ,MAA0B,gBAA1B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;;AAkCA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAsD;AAAA;AAAA;AAAA,SACpDC,KADoD,GAC5C;AACNC,MAAAA,OAAO,EAAEH,SAAS,CAACI,UAAV,EADH;AAENC,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAE,KADL;AAENC,QAAAA,IAAI,EAAE;AAFA;AAFF,KAD4C;;AAAA,SA8EpDC,WA9EoD,GA8EtC,CAACC,IAAD,EAAqBC,IAArB,KAA0D;AACtE,UAAIC,KAAK,GAAG,SAAZ,CADsE,CAGtE;;AACA,UAAI,KAAKT,KAAL,CAAWG,MAAX,CAAkBC,SAAlB,IAA+BI,IAAI,CAACE,IAAL,KAAc,OAAjD,EAA0D;AACtD,YAAIF,IAAI,CAACG,UAAL,CAAgBC,MAAhB,GAAyBJ,IAAI,CAACK,WAAL,CAAiBD,MAA1C,KAAqD,CAAzD,EAA4DH,KAAK,GAAG,QAAR;AAC/D;;AAED,UAAIF,IAAI,KAAKO,SAAb,EAAwB;AACtB,YAAIP,IAAI,CAACG,IAAL,KAAcF,IAAI,CAACE,IAAnB,IAA2BH,IAAI,CAACQ,MAAhC,IAA0CR,IAAI,CAACQ,MAAL,CAAYC,IAAZ,KAAqBR,IAAI,CAACQ,IAAxE,EACEP,KAAK,GAAG,QAAR,CADF,KAEK,IAAIF,IAAI,CAACU,SAAL,IAAkBV,IAAI,CAACU,SAAL,CAAeC,EAAf,CAAkBC,QAAlB,CAA2BX,IAAI,CAACQ,IAAhC,CAAtB,EACHP,KAAK,GAAG,OAAR,CADG,KAEA,IAAIF,IAAI,CAACU,SAAL,IAAkBV,IAAI,CAACU,SAAL,CAAeG,GAAf,CAAmBD,QAAnB,CAA4BX,IAAI,CAACQ,IAAjC,CAAtB,EACHP,KAAK,GAAG,QAAR;AACH;;AAED,aAAOA,KAAP;AACD,KAhGmD;;AAAA,SAkGpDY,WAlGoD,GAkGtC,CAACC,QAAD,EAA8Bf,IAAkB,GAAG,IAAIV,YAAJ,EAAnD,KAAqF;AACjG,UAAI0B,KAAkB,GAAG,EAAzB;AACA,UAAIC,KAAkB,GAAG,EAAzB;AAEA,UAAIC,MAAM,GAAGlB,IAAI,CAACmB,SAAL,EAAb,CAJiG,CAM/F;;AACFJ,MAAAA,QAAQ,CAACE,KAAT,CAAeG,OAAf,CAAwBnB,IAAD,IAAU;AAC/B,YAAIiB,MAAM,CAACN,QAAP,CAAgBX,IAAI,CAACQ,IAArB,CAAJ,EACE;AACF,cAAMY,OAAe,GAAG,UAAUpB,IAAI,CAACQ,IAAvC;AACA,cAAMP,KAAa,GAAG,KAAKH,WAAL,CAAiBC,IAAjB,EAAuBC,IAAvB,CAAtB,CAJ+B,CAM/B;AACA;;AACA,YAAIA,IAAI,CAACqB,MAAT,EAAiB;AACf,cAAIA,MAAM,GAAGrB,IAAI,CAACqB,MAAlB;AACAA,UAAAA,MAAM,CAAClB,UAAP,IAAqBkB,MAAM,CAAClB,UAAP,CAAkBgB,OAAlB,CAA2BG,KAAD,IAAW;AACxDP,YAAAA,KAAK,CAACQ,IAAN,CAAW;AAAEC,cAAAA,IAAI,EAAEJ,OAAR;AAAiBK,cAAAA,EAAE,EAAE,WAAWH;AAAhC,aAAX;AACD,WAFoB,CAArB;AAIAD,UAAAA,MAAM,CAAChB,WAAP,IAAsBgB,MAAM,CAAChB,WAAP,CAAmBc,OAAnB,CAA4BG,KAAD,IAAW;AAC1DP,YAAAA,KAAK,CAACQ,IAAN,CAAW;AAAEC,cAAAA,IAAI,EAAE,WAAWF,KAAnB;AAA0BG,cAAAA,EAAE,EAAEL;AAA9B,aAAX;AACD,WAFqB,CAAtB;AAGD;;AAEDJ,QAAAA,KAAK,CAACO,IAAN,CAAW;AAACG,UAAAA,EAAE,EAAEN,OAAL;AAAcO,UAAAA,KAAK,EAAE3B,IAAI,CAACQ,IAA1B;AAAgCoB,UAAAA,KAAK,EAAE,KAAvC;AAA8C3B,UAAAA,KAAK,EAAEA;AAArD,SAAX;AACD,OApBD;AAsBAa,MAAAA,QAAQ,CAACO,MAAT,CAAgBF,OAAhB,CAAyBnB,IAAD,IAAU;AAChC,YAAIiB,MAAM,CAACN,QAAP,CAAgBX,IAAI,CAACQ,IAArB,CAAJ,EACE;AACF,cAAMY,OAAO,GAAG,WAAWpB,IAAI,CAACQ,IAAhC;AACA,cAAMP,KAAK,GAAG,KAAKH,WAAL,CAAiBC,IAAjB,EAAuBC,IAAvB,CAAd;AACAgB,QAAAA,KAAK,CAACO,IAAN,CAAW;AAACG,UAAAA,EAAE,EAAEN,OAAL;AAAcO,UAAAA,KAAK,EAAE3B,IAAI,CAACQ,IAA1B;AAAgCoB,UAAAA,KAAK,EAAE,SAAvC;AAAkD3B,UAAAA,KAAK,EAAEA;AAAzD,SAAX;AACD,OAND;AAQA,YAAM4B,KAAK,GAAG;AACZb,QAAAA,KAAK,EAAEA,KADK;AAEZD,QAAAA,KAAK,EAAEA;AAFK,OAAd;AAKA,aAAOc,KAAP;AACD,KA7ImD;AAAA;;AASpD,SAAOnC,UAAP,GAAoB;AAClB,WAAO;AACLoC,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAE;AACZC,UAAAA,SAAS,EAAE,IADC;AAEZC,UAAAA,OAAO,EAAE,KAFG;AAGZC,UAAAA,UAAU,EAAE;AAHA;AADR,OADH;AAQLnB,MAAAA,KAAK,EAAE;AACLoB,QAAAA,KAAK,EAAE,SADF;AAELC,QAAAA,MAAM,EAAE;AAFH,OARF;AAYLpB,MAAAA,KAAK,EAAE;AACLmB,QAAAA,KAAK,EAAE;AACLE,UAAAA,UAAU,EAAE,mBADP;AAELC,UAAAA,MAAM,EAAE,mBAFH;AAGLC,UAAAA,KAAK,EAAE;AACLF,YAAAA,UAAU,EAAE,mBADP;AAELC,YAAAA,MAAM,EAAE;AAFH,WAHF;AAOL1C,UAAAA,SAAS,EAAE;AACTyC,YAAAA,UAAU,EAAE,oBADH;AAETC,YAAAA,MAAM,EAAE;AAFC;AAPN,SADF;AAaLE,QAAAA,IAAI,EAAE;AACJL,UAAAA,KAAK,EAAE;AADH;AAbD,OAZF;AA6BLM,MAAAA,WAAW,EAAE;AACXF,QAAAA,KAAK,EAAE;AADI,OA7BR;AAgCLG,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE;AACPR,UAAAA,KAAK,EAAE;AACLE,YAAAA,UAAU,EAAE,mBADP;AAELC,YAAAA,MAAM,EAAE;AAFH;AADA,SADH;AAON/B,QAAAA,MAAM,EAAE;AACN4B,UAAAA,KAAK,EAAE;AACLE,YAAAA,UAAU,EAAE,oBADP;AAELC,YAAAA,MAAM,EAAE;AAFH;AADD,SAPF;AAaNM,QAAAA,KAAK,EAAE;AACLT,UAAAA,KAAK,EAAE;AACLE,YAAAA,UAAU,EAAE,mBADP;AAELC,YAAAA,MAAM,EAAE;AAFH;AADF,SAbD;AAmBNO,QAAAA,MAAM,EAAE;AACNV,UAAAA,KAAK,EAAE;AACLE,YAAAA,UAAU,EAAE,mBADP;AAELC,YAAAA,MAAM,EAAE;AAFH;AADD,SAnBF;AAyBN3C,QAAAA,MAAM,EAAE;AACNwC,UAAAA,KAAK,EAAE;AACLE,YAAAA,UAAU,EAAE,oBADP;AAELC,YAAAA,MAAM,EAAE;AAFH;AADD;AAzBF,OAhCH;AAgELQ,MAAAA,UAAU,EAAE;AAhEP,KAAP;AAkED;;AAmEDC,EAAAA,MAAM,GAAG;AACP,UAAMlB,KAAK,GAAG,KAAKhB,WAAL,CAAiB,KAAKmC,KAAL,CAAWlC,QAA5B,EAAsC,KAAKkC,KAAL,CAAWjD,IAAjD,CAAd;AACA,UAAMkD,MAAM,GAAG;AACbC,MAAAA,KAAK,EAAGC,KAAD,IAAY;AACjB,YAAIA,KAAK,CAACnC,KAAN,CAAYZ,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,gBAAMgD,KAAa,GAAGD,KAAK,CAACnC,KAAN,CAAY,CAAZ,EAAeqC,OAAf,CAAuB,GAAvB,CAAtB;AACA,cAAI7C,IAAY,GAAG2C,KAAK,CAACnC,KAAN,CAAY,CAAZ,CAAnB;AACA,cAAId,IAA4B,GAAG,MAAnC;;AACA,cAAIkD,KAAK,GAAG,CAAZ,EAAe;AACb5C,YAAAA,IAAI,GAAG2C,KAAK,CAACnC,KAAN,CAAY,CAAZ,EAAesC,KAAf,CAAqBF,KAArB,CAAP;AACAlD,YAAAA,IAAI,GAAGiD,KAAK,CAACnC,KAAN,CAAY,CAAZ,EAAesC,KAAf,CAAqB,CAArB,EAAwBF,KAAK,GAAG,CAAhC,CAAP;AACD;;AACD,gBAAMpD,IAAgB,GAAG;AACvBQ,YAAAA,IAAI,EAAEA,IADiB;AAEvB+C,YAAAA,IAAI,EAAE/C,IAFiB;AAGvBN,YAAAA,IAAI,EAAEA;AAHiB,WAAzB;AAKA,eAAK8C,KAAL,CAAWQ,aAAX,CAAyBxD,IAAzB,EAA+B,IAA/B;AACD;AACF;AAjBY,KAAf;AAmBA,wBACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,KAAK,EAAE;AAAEyD,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,MAAM,EAAE;AAA5B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE7B,KAAd;AAAqB,MAAA,OAAO,EAAE,KAAKrC,KAAL,CAAWC,OAAzC;AAAkD,MAAA,KAAK,EAAE;AAACiE,QAAAA,MAAM,EAAE;AAAT,OAAzD;AAA2E,MAAA,MAAM,EAAET,MAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,sBAAhB;AAAuC,MAAA,OAAO,EAAE,MAC9C;AACE,YAAItD,MAAM,GAAG,KAAKH,KAAL,CAAWG,MAAxB;AACAA,QAAAA,MAAM,CAACC,SAAP,GAAmB,CAAC,KAAKJ,KAAL,CAAWG,MAAX,CAAkBC,SAAtC;AACA,aAAK+D,QAAL,CAAc;AAAChE,UAAAA,MAAM,EAAEA;AAAT,SAAd;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKH,KAAL,CAAWG,MAAX,CAAkBC,SAAlB,GAA8B,aAA9B,GAA8C,QANjD,CADF,CAJF,CADA;AAgBD;;AApLmD;;AAuLtD,eAAeN,SAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport Graph from 'react-graph-vis';\n\nimport * as RosGraph from './lib/RosGraph';\nimport RosGraphView from './lib/RosGraphView';\nimport type {SimpleNode} from './lib/RosGraphView';\n\ntype Edge = {\n  from: string,\n  to: string,\n}\n\ntype Node = {\n  id: string,\n  label: string,\n  shape: string,\n  group: string,\n}\n\ntype GraphType = {\n  edges: Array<Edge>,\n  nodes: Array<Node>,\n}\n\ntype Props = {\n  rosGraph: RosGraph.RosGraph,\n  setNodeActive: (treeNode: SimpleNode, toggled: boolean) => void,\n  view: RosGraphView,\n}\n\ntype State = {\n  options: Object,\n  lonely: {\n    highlight: boolean,\n    hide: boolean,\n  }\n}\n\nclass NodeGraph extends React.Component<Props, State> {\n  state = {\n    options: NodeGraph.getOptions(),\n    lonely: {\n      highlight: false,\n      hide: false,\n    }\n  }\n\n  static getOptions() {\n    return {\n      layout: {\n        hierarchical: {\n          direction: 'LR',\n          enabled: false,\n          sortMethod: 'directed'\n        }\n      },\n      edges: {\n        color: \"#d4d3d3\",\n        smooth: true\n      },\n      nodes: {\n        color: {\n          background: 'rgb(98, 118, 131)',\n          border: 'rgb(98, 118, 131)',\n          hover: {\n            background: 'rgb(92, 162, 180)',\n            border: 'rgb(122, 192, 210)'\n          },\n          highlight: {\n            background: 'rgb(122, 192, 210)',\n            border: 'rgb(122, 192, 210)'\n          }\n        },\n        font: {\n          color: 'rgb(223, 223, 223)'\n        }\n      },\n      interaction: {\n        hover: true\n      },\n      groups: {\n        default: {\n          color: {\n            background: 'rgb(98, 118, 131)',\n            border: 'rgb(98, 118, 131)'\n          }\n        },\n        active: {\n          color: {\n            background: 'rgb(122, 192, 210)',\n            border: 'rgb(122, 192, 210)'\n          }\n        },\n        input: {\n          color: {\n            background: 'rgb(177, 147, 18)',\n            border: 'rgb(177, 147, 18)'\n          }\n        },\n        output: {\n          color: {\n            background: 'rgb(128, 177, 18)',\n            border: 'rgb(128, 177, 18)'\n          }\n        },\n        lonely: {\n          color: {\n            background: 'rgb(163, 105, 105)',\n            border: 'rgb(163, 105, 105)'\n          }\n        }\n      },\n      autoResize: true\n    };\n  }\n\n  getGroupTag = (view: RosGraphView, node: RosGraph.Primitive): string => {\n    let group = \"default\"\n\n    // Lonely node\n    if (this.state.lonely.highlight && node.type === \"topic\") {\n        if (node.publishers.length + node.subscribers.length === 1) group = \"lonely\"\n    }\n\n    if (view !== undefined) {\n      if (view.type === node.type && view.active && view.active.path === node.path)\n        group = \"active\"\n      else if (view.relations && view.relations.in.includes(node.path))\n        group = \"input\"\n      else if (view.relations && view.relations.out.includes(node.path))\n        group = \"output\"\n    }\n\n    return group\n  }\n\n  createGraph = (rosGraph: RosGraph.RosGraph, view: RosGraphView = new RosGraphView()): GraphType => {\n    let edges: Array<Edge> = []\n    let nodes: Array<Node> = []\n\n    let hidden = view.getHidden()\n\n      // Deal with nodes\n    rosGraph.nodes.forEach((node) => {\n      if (hidden.includes(node.path))\n        return\n      const graphId: string = \"node_\" + node.path\n      const group: string = this.getGroupTag(view, node)\n\n      // ***** Add edges ******\n      // Assuming topics but links may be services or actions etc.\n      if (node.topics) {\n        let topics = node.topics\n        topics.publishers && topics.publishers.forEach((topic) => {\n          edges.push({ from: graphId, to: \"topic_\" + topic })\n        })\n\n        topics.subscribers && topics.subscribers.forEach((topic) => {\n          edges.push({ from: \"topic_\" + topic, to: graphId })\n        })\n      }\n\n      nodes.push({id: graphId, label: node.path, shape: \"box\", group: group})\n    })\n\n    rosGraph.topics.forEach((node) => {\n      if (hidden.includes(node.path))\n        return\n      const graphId = \"topic_\" + node.path\n      const group = this.getGroupTag(view, node)\n      nodes.push({id: graphId, label: node.path, shape: \"ellipse\", group: group})\n    });\n\n    const graph = {\n      nodes: nodes,\n      edges: edges\n    };\n\n    return graph\n  }\n\n  render() {\n    const graph = this.createGraph(this.props.rosGraph, this.props.view)\n    const events = {\n      click: (event) =>  {\n        if (event.nodes.length > 0) {\n          const index: number = event.nodes[0].indexOf('/')\n          let path: string = event.nodes[0]\n          let type: RosGraph.PrimitiveType = \"node\"\n          if (index > 0) {\n            path = event.nodes[0].slice(index)\n            type = event.nodes[0].slice(0, index - 1)\n          }\n          const node: SimpleNode = {\n            path: path,\n            name: path,\n            type: type,\n          }\n          this.props.setNodeActive(node, true)\n        }\n      }\n    }\n    return (\n    <div className=\"NodeGraph\">\n      <div style={{ flex: '1 1 auto', height: 0}}>\n        <Graph graph={graph} options={this.state.options} style={{height: \"100%\"}} events={events} />\n      </div>\n      <div className=\"ButtonPanel\">\n        <span className='SmallButton ColorTwo' onClick={() =>\n          {\n            let lonely = this.state.lonely\n            lonely.highlight = !this.state.lonely.highlight\n            this.setState({lonely: lonely})\n          }\n        }>{this.state.lonely.highlight ? \"hide lonely\" : \"lonely\"}</span>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default NodeGraph;\n"]},"metadata":{},"sourceType":"module"}