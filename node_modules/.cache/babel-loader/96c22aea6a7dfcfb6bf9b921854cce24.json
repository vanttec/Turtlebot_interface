{"ast":null,"code":"var _jsxFileName = \"/home/edison/react_projects/ros-app/src/components/ros-graph/Message.js\";\nimport * as React from 'react';\nimport _ from 'lodash';\nconst primitivesFloat = [\"float32\", \"float64\"];\nconst primitivesInteger = [\"int8\", \"uint8\", \"int16\", \"uint16\", \"int32\", \"uint32\", \"int64\", \"uint64\"];\nconst primitives = [\"byte\", \"bool\", \"string\"];\n\nclass Message extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.MessageField = ({\n      fieldIndex,\n      messageIndex,\n      name,\n      path,\n      type\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"MessageLine\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"MessageLabel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, name, \" (\", this.props.messageDetails[messageIndex].fieldtypes[fieldIndex], \"):\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"MessageTypeInput\",\n        type: \"text\",\n        value: this.props.values[messageIndex][fieldIndex],\n        onChange: event => {\n          // Update message\n          const message = this.props.message;\n          var value = null;\n\n          if (primitives.includes(type)) {\n            value = event.target.value;\n          } else if (primitivesFloat.includes(type)) {\n            value = parseFloat(event.target.value);\n          } else if (primitivesInteger.includes(type)) {\n            value = parseInt(event.target.value, 10);\n          } else {\n            console.log(\"I was not expecting this message type\", type);\n            return;\n          }\n\n          _.set(message, path, value);\n\n          const values = this.props.values;\n          values[messageIndex][fieldIndex] = value;\n          this.props.updateState({\n            message: message,\n            values: values\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this.MessageFieldArray = ({\n      messageIndex,\n      path\n    }) => {\n      const message = this.props.messageDetails[messageIndex];\n      const x = message.fieldtypes.map((field, i) => {\n        const name = message.fieldnames[i];\n        const newPath = path.concat(name);\n\n        if (primitives.includes(field) || primitivesFloat.includes(field) || primitivesInteger.includes(field)) {\n          return this.MessageField({\n            name: name,\n            fieldIndex: i,\n            messageIndex: messageIndex,\n            path: newPath,\n            type: field\n          });\n        } else if (field === \"std_msgs/Header\") {\n          return this.MessageHeader({\n            name: name,\n            messageIndex: messageIndex + 1,\n            path: newPath\n          });\n        } else {\n          return this.MessageType({\n            name: name,\n            messageIndex: messageIndex + 1,\n            path: newPath\n          });\n        }\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginLeft: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, x);\n    };\n\n    this.MessageType = ({\n      messageIndex,\n      name,\n      path\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"MessageLabel\",\n        style: {\n          marginRight: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      }, name, \":\"), this.MessageFieldArray({\n        messageIndex: messageIndex,\n        path: path\n      }));\n    };\n\n    this.MessageHeader = ({\n      messageIndex,\n      name,\n      path\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"MessageLine\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"MessageLabel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }, name, \":\"), /*#__PURE__*/React.createElement(\"select\", {\n        className: \"MessageTypeInput\",\n        value: this.props.auto,\n        onChange: event => this.props.updateState({\n          auto: event.target.value === \"true\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }, \"auto\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }\n      }, \"manual\"))), this.props.auto || this.MessageFieldArray({\n        messageIndex: messageIndex,\n        path: path\n      }));\n    };\n  }\n\n  render() {\n    return this.MessageFieldArray({\n      messageIndex: 0,\n      path: []\n    });\n  }\n\n}\n\nexport default Message;","map":{"version":3,"sources":["/home/edison/react_projects/ros-app/src/components/ros-graph/Message.js"],"names":["React","_","primitivesFloat","primitivesInteger","primitives","Message","Component","MessageField","fieldIndex","messageIndex","name","path","type","props","messageDetails","fieldtypes","values","event","message","value","includes","target","parseFloat","parseInt","console","log","set","updateState","MessageFieldArray","x","map","field","i","fieldnames","newPath","concat","MessageHeader","MessageType","marginLeft","marginRight","auto","render"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport _ from 'lodash';\n\ntype Path = Array<string>\ntype Index = number\n\ntype RosMessage = {\n  header?: {\n    stamp: {\n      secs: number,\n      nsecs: number,\n    }\n  }\n}\n\ntype Details = {\n  examples: Array<mixed>,\n  fieldarraylen: Array<number>,\n  fieldnames: Array<string>,\n  fieldtypes: Array<string>,\n  type: string,\n}\n\ntype ReplaceMe = {\n  fieldIndex: Index,\n  messageIndex: Index,\n  name: string,\n  path: Path,\n  type: string,\n}\n\ntype Props = {\n  auto: boolean,\n  message: RosMessage,\n  messageDetails: Array<Details>,\n  updateState: ({message?: RosMessage, values?: Array<Array<mixed>>, auto?: boolean}) => void,\n  values: Array<Array<mixed>>,\n}\n\nconst primitivesFloat = [\n  \"float32\",\n  \"float64\",\n];\nconst primitivesInteger = [\n  \"int8\",\n  \"uint8\",\n  \"int16\",\n  \"uint16\",\n  \"int32\",\n  \"uint32\",\n  \"int64\",\n  \"uint64\",\n];\nconst primitives = [\n  \"byte\",\n  \"bool\",\n  \"string\",\n];\n\nclass Message extends React.Component<Props> {\n  MessageField = ({fieldIndex, messageIndex, name, path, type}: ReplaceMe): React.Element<any> => {\n    return (\n      <div className=\"MessageLine\">\n        <span className=\"MessageLabel\">{name} ({this.props.messageDetails[messageIndex].fieldtypes[fieldIndex]}):</span>\n        <input className=\"MessageTypeInput\"\n          type=\"text\"\n          value={this.props.values[messageIndex][fieldIndex]}\n          onChange={\n            (event) => {\n              // Update message\n              const message = this.props.message;\n              var value = null\n\n              if (primitives.includes(type)) {\n                value = event.target.value\n              } else if (primitivesFloat.includes(type)) {\n                value = parseFloat(event.target.value)\n              } else if (primitivesInteger.includes(type)) {\n                value = parseInt(event.target.value, 10)\n              } else {\n                console.log(\"I was not expecting this message type\", type)\n                return\n              }\n\n              _.set(message, path, value);\n\n              const values = this.props.values;\n              values[messageIndex][fieldIndex] = value;\n\n              this.props.updateState({\n                message: message,\n                values: values,\n              });\n            }\n          }/>\n        </div>\n      )\n    }\n\n    MessageFieldArray = ({messageIndex, path}: {messageIndex: Index, path: Path}): React.Element<any> => {\n      const message = this.props.messageDetails[messageIndex];\n\n      const x: Array<React.Element<any>> = message.fieldtypes.map((field, i) => {\n        const name = message.fieldnames[i];\n        const newPath = path.concat(name);\n        if (primitives.includes(field) || primitivesFloat.includes(field) || primitivesInteger.includes(field)) {\n          return this.MessageField({name: name, fieldIndex: i, messageIndex: messageIndex, path: newPath, type: field});\n        } else if (field === \"std_msgs/Header\") {\n          return this.MessageHeader({name: name, messageIndex: messageIndex + 1, path: newPath});\n        } else {\n          return this.MessageType({name: name, messageIndex: messageIndex + 1, path: newPath});\n        }\n      })\n\n      return (\n        <div style={{marginLeft: 10}}>{x}</div>\n      )\n    }\n\n    MessageType = ({messageIndex, name, path}: {messageIndex: Index, name: string, path: Path}): React.Element<any> => {\n      return (\n        <div>\n          <div className=\"MessageLabel\" style={{marginRight: 5}}>{name}:</div>\n          {this.MessageFieldArray({messageIndex: messageIndex, path: path})}\n        </div>\n      );\n    }\n\n    MessageHeader = ({messageIndex, name, path}: {messageIndex: Index, name: string, path: Path}): React.Element<any> => {\n      return (\n        <div>\n          <div className=\"MessageLine\">\n            <span className=\"MessageLabel\">{name}:</span>\n            <select className=\"MessageTypeInput\" value={this.props.auto} onChange={(event: {target: {value: boolean}}) => this.props.updateState({auto: event.target.value === \"true\"})}>\n              <option value={true}>auto</option>\n              <option value={false}>manual</option>\n            </select>\n          </div>\n          {this.props.auto || this.MessageFieldArray({messageIndex: messageIndex, path: path})}\n        </div>\n      )\n    }\n\n    render() {\n      return this.MessageFieldArray({messageIndex: 0, path: []});\n    }\n}\n\nexport default Message;\n"]},"metadata":{},"sourceType":"module"}