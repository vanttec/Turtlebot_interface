{"ast":null,"code":"import * as RosGraph from './../lib/RosGraph';\n/**\n * This class describes a view of the immutable rosgraph.\n *\n * Most methods in this class will return a copy of itself to help with React\n */\n\nconst DEBUG_NAMES = ['/clock', '/cpu_monitor', '/diag_agg', '/hd_monitor', '/monitor', '/pr2_dashboard', '/rosapi', '/rosout_agg', '/rosout', '/rqt', '/runtime_logger', '/rviz', '/rxloggerlevel', '/statistics', '/record'];\n\nclass RosGraphView {\n  constructor() {\n    this.hideItem = (path, type) => {\n      this.hidden.push(path);\n      return this;\n    };\n\n    this.unhideItems = () => {\n      this.hidden = [];\n      return this;\n    };\n\n    this.getHidden = () => {\n      if (this.hideDebug) {\n        return [...this.hidden, ...DEBUG_NAMES];\n      } else {\n        return this.hidden;\n      }\n    };\n\n    this.searchFor = search => {\n      this.search = search;\n      return this;\n    };\n\n    this.filterFor = filter => {\n      this.filter = filter;\n      return this;\n    };\n\n    this.toggled = {};\n    this.hidden = [];\n    this.hideDebug = true;\n    this.search = \"\";\n  }\n\n  toggleDebug() {\n    this.hideDebug = !this.hideDebug;\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  updateToggled(toggledList = [], path, toggled) {\n    // Not in toggled list but meant to be\n    if (toggled) {\n      path.split(\"/\").reduce((path, value) => {\n        const subId = [path, value].join('/');\n        const toggledIndex = toggledList.indexOf(subId);\n        if (toggledIndex === -1) toggledList.push(subId);\n        return subId;\n      });\n    } else {\n      // If we aren't meant to be toggled, remove element using splice\n      // TODO: toggle all subtrees\n      const toggledIndex = toggledList.indexOf(path);\n      if (toggledIndex > -1) toggledList.splice(toggledIndex, 1);\n    }\n\n    return toggledList;\n  }\n\n  setNodeActive(treeNode, toggled, rosGraph) {\n    // set node active\n    this.active = rosGraph.findNode(treeNode.path, treeNode.type);\n    this.type = treeNode.type;\n    const relations = rosGraph.getRelations(treeNode.path, treeNode.type); // Toggled\n\n    let newToggled = {};\n    newToggled[treeNode.type] = this.updateToggled(this.toggled[treeNode.type], treeNode.path, toggled);\n    if (relations) newToggled[relations.type] = [...relations.in, ...relations.out].reduce((toggledList, relation) => this.updateToggled(toggledList, relation, true), []);\n    this.relations = relations;\n    this.toggled = newToggled;\n    return this;\n  }\n\n}\n\nexport default RosGraphView;","map":{"version":3,"sources":["/home/edison/react_projects/ros-app/src/lib/RosGraphView.js"],"names":["RosGraph","DEBUG_NAMES","RosGraphView","constructor","hideItem","path","type","hidden","push","unhideItems","getHidden","hideDebug","searchFor","search","filterFor","filter","toggled","toggleDebug","updateToggled","toggledList","split","reduce","value","subId","join","toggledIndex","indexOf","splice","setNodeActive","treeNode","rosGraph","active","findNode","relations","getRelations","newToggled","in","out","relation"],"mappings":"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","sourcesContent":["// @flow\nimport * as RosGraph from './../lib/RosGraph'\n\n\n/**\n * This class describes a view of the immutable rosgraph.\n *\n * Most methods in this class will return a copy of itself to help with React\n */\n\nconst DEBUG_NAMES = [\n    '/clock',\n    '/cpu_monitor',\n    '/diag_agg',\n    '/hd_monitor',\n    '/monitor',\n    '/pr2_dashboard',\n    '/rosapi',\n    '/rosout_agg',\n    '/rosout',\n    '/rqt',\n    '/runtime_logger',\n    '/rviz',\n    '/rxloggerlevel',\n    '/statistics',\n    '/record',\n];\n\ntype SimpleNode = {\n  name: string,\n  path: string,\n  type: RosGraph.PrimitiveType,\n}\n\n\nclass RosGraphView {\n  active: ?RosGraph.Primitive\n  type: ?RosGraph.PrimitiveType\n  toggled: Object\n  hidden: Array<RosGraph.Id>\n  hideDebug: boolean\n  relations: ?RosGraph.Relations\n  search: string\n  filter: ?string\n\n  constructor() {\n    this.toggled = {}\n    this.hidden = []\n    this.hideDebug = true\n    this.search = \"\"\n  }\n\n  toggleDebug() {\n    this.hideDebug = !this.hideDebug\n    return this\n  }\n\n  hideItem = (path: string, type: string) => {\n    this.hidden.push(path)\n    return this\n  }\n\n  unhideItems = () => {\n    this.hidden = []\n    return this\n  }\n\n  getHidden = () => {\n    if (this.hideDebug) {\n      return [...this.hidden, ...DEBUG_NAMES]\n    } else {\n      return this.hidden\n    }\n  }\n\n  searchFor = (search: string) => {\n    this.search = search\n    return this\n  }\n\n  filterFor = (filter: string) => {\n    this.filter = filter\n    return this\n  }\n\n  /**\n   * @private\n   */\n  updateToggled(toggledList: Array<RosGraph.Id> = [], path: string, toggled: boolean): Array<RosGraph.Id> {\n\n    // Not in toggled list but meant to be\n    if (toggled) {\n      path.split(\"/\").reduce((path, value) => {\n        const subId = [path, value].join('/')\n        const toggledIndex = toggledList.indexOf(subId)\n        if (toggledIndex === -1) toggledList.push(subId)\n        return subId\n      })\n    } else {\n      // If we aren't meant to be toggled, remove element using splice\n      // TODO: toggle all subtrees\n      const toggledIndex = toggledList.indexOf(path)\n      if (toggledIndex > -1) toggledList.splice(toggledIndex, 1)\n    }\n\n    return toggledList\n  }\n\n  setNodeActive(treeNode: SimpleNode, toggled: boolean, rosGraph: RosGraph.RosGraph) {\n    // set node active\n    this.active = rosGraph.findNode(treeNode.path, treeNode.type)\n    this.type = treeNode.type\n    const relations = rosGraph.getRelations(treeNode.path, treeNode.type)\n\n    // Toggled\n    let newToggled: Object = {}\n    newToggled[treeNode.type] = this.updateToggled(this.toggled[treeNode.type], treeNode.path, toggled)\n    if (relations) newToggled[relations.type] = [...relations.in, ...relations.out].reduce((toggledList, relation) => this.updateToggled(toggledList, relation, true), [])\n\n    this.relations = relations\n    this.toggled = newToggled\n\n    return this\n  }\n}\n\nexport type {SimpleNode}\nexport default RosGraphView;\n"]},"metadata":{},"sourceType":"module"}